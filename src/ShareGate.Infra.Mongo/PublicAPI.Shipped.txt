#nullable enable
abstract ShareGate.Infra.Mongo.NamedConventionPack.Name.get -> string!
abstract ShareGate.Infra.Mongo.NamedConventionPack.TypeFilter(System.Type! type) -> bool
const ShareGate.Infra.Mongo.MongoClientOptions.SectionName = "Mongo" -> string!
ShareGate.Infra.Mongo.AggregatorEventSubscriber
ShareGate.Infra.Mongo.AggregatorEventSubscriber.AggregatorEventSubscriber() -> void
ShareGate.Infra.Mongo.AggregatorEventSubscriber.Subscribe(MongoDB.Driver.Core.Events.IEventSubscriber! subscriber) -> void
ShareGate.Infra.Mongo.AggregatorEventSubscriber.Subscribe<TEvent>(System.Action<TEvent>! handler) -> void
ShareGate.Infra.Mongo.AggregatorEventSubscriber.TryGetEventHandler<TEvent>(out System.Action<TEvent>! handler) -> bool
ShareGate.Infra.Mongo.IMongoEventSubscriberFactory
ShareGate.Infra.Mongo.IMongoEventSubscriberFactory.CreateEventSubscribers(string! clientName) -> System.Collections.Generic.IEnumerable<MongoDB.Driver.Core.Events.IEventSubscriber!>!
ShareGate.Infra.Mongo.Indexing.IMongoIndexer
ShareGate.Infra.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>! assemblies, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
ShareGate.Infra.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Collections.Generic.IEnumerable<System.Type!>! types, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
ShareGate.Infra.Mongo.Indexing.IMongoIndexer.UpdateIndexesAsync(System.Reflection.Assembly! assembly, string? clientName = null, string? databaseName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
ShareGate.Infra.Mongo.MongoBuilder
ShareGate.Infra.Mongo.MongoBuilder.AddEncryptor<TEncryptor>() -> ShareGate.Infra.Mongo.MongoBuilder!
ShareGate.Infra.Mongo.MongoBuilder.AddNamedClient(string! clientName, System.Action<ShareGate.Infra.Mongo.MongoClientOptions!>? configure = null) -> ShareGate.Infra.Mongo.MongoBuilder!
ShareGate.Infra.Mongo.MongoBuilder.ConfigureStaticOptions(System.Action<ShareGate.Infra.Mongo.MongoStaticOptions!>! configure) -> ShareGate.Infra.Mongo.MongoBuilder!
ShareGate.Infra.Mongo.MongoBuilder.MongoBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
ShareGate.Infra.Mongo.MongoBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
ShareGate.Infra.Mongo.MongoClientOptions
ShareGate.Infra.Mongo.MongoClientOptions.CommandPerformanceAnalysis.get -> ShareGate.Infra.Mongo.MongoCommandPerformanceAnalysisOptions!
ShareGate.Infra.Mongo.MongoClientOptions.ConnectionString.get -> string!
ShareGate.Infra.Mongo.MongoClientOptions.ConnectionString.set -> void
ShareGate.Infra.Mongo.MongoClientOptions.DefaultDatabaseName.get -> string!
ShareGate.Infra.Mongo.MongoClientOptions.DefaultDatabaseName.set -> void
ShareGate.Infra.Mongo.MongoClientOptions.EnableSensitiveInformationLogging.get -> bool
ShareGate.Infra.Mongo.MongoClientOptions.EnableSensitiveInformationLogging.set -> void
ShareGate.Infra.Mongo.MongoClientOptions.Indexing.get -> ShareGate.Infra.Mongo.MongoIndexingOptions!
ShareGate.Infra.Mongo.MongoClientOptions.MongoClientOptions() -> void
ShareGate.Infra.Mongo.MongoClientOptions.MongoClientSettingsConfigurator.get -> System.Action<MongoDB.Driver.MongoClientSettings!>?
ShareGate.Infra.Mongo.MongoClientOptions.MongoClientSettingsConfigurator.set -> void
ShareGate.Infra.Mongo.MongoCommandPerformanceAnalysisOptions
ShareGate.Infra.Mongo.MongoCommandPerformanceAnalysisOptions.EnableCollectionScanDetection.get -> bool
ShareGate.Infra.Mongo.MongoCommandPerformanceAnalysisOptions.EnableCollectionScanDetection.set -> void
ShareGate.Infra.Mongo.MongoCommandPerformanceAnalysisOptions.MongoCommandPerformanceAnalysisOptions() -> void
ShareGate.Infra.Mongo.MongoIndexingOptions
ShareGate.Infra.Mongo.MongoIndexingOptions.DistributedLockName.get -> string!
ShareGate.Infra.Mongo.MongoIndexingOptions.DistributedLockName.set -> void
ShareGate.Infra.Mongo.MongoIndexingOptions.LockAcquisitionTimeoutInSeconds.get -> int
ShareGate.Infra.Mongo.MongoIndexingOptions.LockAcquisitionTimeoutInSeconds.set -> void
ShareGate.Infra.Mongo.MongoIndexingOptions.LockMaxLifetimeInSeconds.get -> int
ShareGate.Infra.Mongo.MongoIndexingOptions.LockMaxLifetimeInSeconds.set -> void
ShareGate.Infra.Mongo.MongoIndexingOptions.MongoIndexingOptions() -> void
ShareGate.Infra.Mongo.MongoServiceCollectionExtensions
ShareGate.Infra.Mongo.MongoStaticOptions
ShareGate.Infra.Mongo.MongoStaticOptions.BsonSerializers.get -> System.Collections.Generic.IDictionary<System.Type!, MongoDB.Bson.Serialization.IBsonSerializer!>!
ShareGate.Infra.Mongo.MongoStaticOptions.ConventionPacks.get -> System.Collections.Generic.IList<ShareGate.Infra.Mongo.NamedConventionPack!>!
ShareGate.Infra.Mongo.MongoStaticOptions.MongoStaticOptions() -> void
ShareGate.Infra.Mongo.NamedConventionPack
ShareGate.Infra.Mongo.NamedConventionPack.NamedConventionPack() -> void
ShareGate.Infra.Mongo.Security.IMongoValueEncryptor
ShareGate.Infra.Mongo.Security.IMongoValueEncryptor.Decrypt(byte[]! bytes, ShareGate.ComponentModel.DataAnnotations.SensitivityScope sensitivityScope) -> byte[]!
ShareGate.Infra.Mongo.Security.IMongoValueEncryptor.Encrypt(byte[]! bytes, ShareGate.ComponentModel.DataAnnotations.SensitivityScope sensitivityScope) -> byte[]!
static ShareGate.Infra.Mongo.MongoServiceCollectionExtensions.AddMongo(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<ShareGate.Infra.Mongo.MongoClientOptions!>? configure = null) -> ShareGate.Infra.Mongo.MongoBuilder!